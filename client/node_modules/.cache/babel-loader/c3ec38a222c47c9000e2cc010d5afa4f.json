{"ast":null,"code":"var _jsxFileName = \"/home/thanh/Desktop/Trackerlist/client/src/contexts/Postcontext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\";\nimport React from 'react';\nimport axios from 'axios';\nimport { apiUrl, POSTS_LOADED_SUCCESS, POSTS_LOADED_FAIL } from './constants';\nimport { PostsReducer } from '../reducers/PostsReducer';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PostContext = /*#__PURE__*/createContext();\n\nconst PostcontextProvider = ({\n  children\n}) => {\n  _s();\n\n  //State\n  const [postState, dispatch] = useReducer(PostsReducer, {\n    posts: [],\n    postsLoading: true\n  });\n  const [showAddPostModal, SetshowAddPostModal] = useState(false); //GetAllPost\n\n  const getPosts = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/posts`);\n\n      if (response.data.success) {\n        dispatch({\n          type: POSTS_LOADED_SUCCESS,\n          payload: response.data.posts\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: POSTS_LOADED_FAIL\n      });\n    }\n  };\n\n  const PostContextData = {\n    postState,\n    getPosts,\n    showAddPostModal\n  };\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: PostContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostcontextProvider, \"lgTc6ObcrV2tPWkRgxKqCcYH/hQ=\");\n\n_c = PostcontextProvider;\nexport default PostcontextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostcontextProvider\");","map":{"version":3,"sources":["/home/thanh/Desktop/Trackerlist/client/src/contexts/Postcontext.js"],"names":["createContext","useReducer","React","axios","apiUrl","POSTS_LOADED_SUCCESS","POSTS_LOADED_FAIL","PostsReducer","useState","PostContext","PostcontextProvider","children","postState","dispatch","posts","postsLoading","showAddPostModal","SetshowAddPostModal","getPosts","response","get","data","success","type","payload","error","PostContextData"],"mappings":";;;AAAA,SAASA,aAAT,EAAuBC,UAAvB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAeC,oBAAf,EAAoCC,iBAApC,QAA4D,aAA5D;AACA,SAAQC,YAAR,QAA2B,0BAA3B;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,OAAO,MAAMC,WAAW,gBAAGT,aAAa,EAAjC;;AAEP,MAAMU,mBAAmB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAExC;AACA,QAAM,CAACC,SAAD,EAAWC,QAAX,IAAuBZ,UAAU,CAACM,YAAD,EAAc;AACjDO,IAAAA,KAAK,EAAC,EAD2C;AAEjDC,IAAAA,YAAY,EAAC;AAFoC,GAAd,CAAvC;AAIA,QAAM,CAACC,gBAAD,EAAkBC,mBAAlB,IAAyCT,QAAQ,CAAC,KAAD,CAAvD,CAPwC,CASxC;;AACA,QAAMU,QAAQ,GAAC,YAAU;AACrB,QAAI;AACA,YAAMC,QAAQ,GAAI,MAAMhB,KAAK,CAACiB,GAAN,CAAW,GAAEhB,MAAO,QAApB,CAAxB;;AACA,UAAGe,QAAQ,CAACE,IAAT,CAAcC,OAAjB,EAAyB;AACrBT,QAAAA,QAAQ,CAAC;AAACU,UAAAA,IAAI,EAAClB,oBAAN;AAA2BmB,UAAAA,OAAO,EAACL,QAAQ,CAACE,IAAT,CAAcP;AAAjD,SAAD,CAAR;AACH;AACJ,KALD,CAKE,OAAOW,KAAP,EAAc;AACZZ,MAAAA,QAAQ,CAAC;AAACU,QAAAA,IAAI,EAACjB;AAAN,OAAD,CAAR;AACH;AACJ,GATD;;AAWA,QAAMoB,eAAe,GAAG;AAACd,IAAAA,SAAD;AAAWM,IAAAA,QAAX;AAAoBF,IAAAA;AAApB,GAAxB;AAEA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAIU,eAA/B;AAAA,cACKf;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA5BD;;GAAMD,mB;;KAAAA,mB;AA8BN,eAAeA,mBAAf","sourcesContent":["import { createContext,useReducer } from \"react\";\nimport React from 'react'\nimport axios from 'axios'\nimport {apiUrl,POSTS_LOADED_SUCCESS,POSTS_LOADED_FAIL} from './constants'\nimport {PostsReducer} from '../reducers/PostsReducer'\nimport { useState } from \"react\";\n\nexport const PostContext = createContext()\n\nconst PostcontextProvider = ({children}) => {\n    \n    //State\n    const [postState,dispatch] = useReducer(PostsReducer,{\n        posts:[],\n        postsLoading:true\n    })\n    const [showAddPostModal,SetshowAddPostModal] = useState(false)\n\n    //GetAllPost\n    const getPosts=async() =>{\n        try {\n            const response =  await axios.get(`${apiUrl}/posts`)\n            if(response.data.success){\n                dispatch({type:POSTS_LOADED_SUCCESS,payload:response.data.posts})\n            }\n        } catch (error) {\n            dispatch({type:POSTS_LOADED_FAIL})\n        }\n    }\n\n    const PostContextData = {postState,getPosts,showAddPostModal}\n\n    return (\n        <PostContext.Provider value = {PostContextData}>\n            {children}\n        </PostContext.Provider>\n    )\n}\n\nexport default PostcontextProvider\n"]},"metadata":{},"sourceType":"module"}