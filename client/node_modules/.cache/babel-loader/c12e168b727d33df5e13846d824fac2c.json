{"ast":null,"code":"var _jsxFileName = \"/home/thanh/Desktop/Trackerlist/client/src/contexts/Postcontext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { apiUrl, POSTS_LOADED_SUCCESS, POSTS_LOADED_FAIL, ADD_POST, DELETE_POST, UPDATE_POST, FIND_POST } from \"./constants\";\nimport { PostsReducer } from \"../reducers/PostsReducer\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PostContext = /*#__PURE__*/createContext();\n\nconst PostcontextProvider = ({\n  children\n}) => {\n  _s();\n\n  //State\n  const [postState, dispatch] = useReducer(PostsReducer, {\n    post: null,\n    posts: [],\n    postsLoading: true\n  });\n  const [showAddPostModal, SetshowAddPostModal] = useState(false);\n  const [showUpdatePostModal, SetshowUpdatePostModal] = useState(false);\n  const [showToast, SetshowToast] = useState({\n    show: false,\n    message: '',\n    type: null\n  }); //GetAllPost\n\n  const getPosts = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/posts`);\n\n      if (response.data.success) {\n        dispatch({\n          type: POSTS_LOADED_SUCCESS,\n          payload: response.data.posts\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: POSTS_LOADED_FAIL\n      });\n    }\n  }; //Add Post\n\n\n  const addPost = async newPost => {\n    try {\n      const response = await axios.post(`${apiUrl}/posts`, newPost);\n\n      if (response.data.success) {\n        dispatch({\n          type: ADD_POST,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.reponse.data : {\n        success: false,\n        message: 'Server error'\n      };\n    }\n  }; //Delete Post\n\n\n  const deletePost = async PostID => {\n    try {\n      const response = await axios.delete(`${apiUrl}/posts/${PostID}`);\n\n      if (response.data.success) {\n        dispatch({\n          type: DELETE_POST,\n          payload: PostID\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Find post when user is updating\n\n\n  const findPost = PostID => {\n    const post = postState.posts.find(x => x._id === PostID);\n    dispatch({\n      type: FIND_POST,\n      payload: post\n    });\n  }; //Update Post\n\n\n  const updatePost = async updatePost => {\n    try {\n      const response = await axios.put(`${apiUrl}/posts/${updatePost._id}`, updatePost);\n\n      if (response.data.success) {\n        dispatch({\n          type: UPDATE_POST,\n          payload: response.data.post\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response.data ? error.reponse.data : {\n        success: false,\n        message: 'Server error'\n      };\n    }\n  }; //Take away\n\n\n  const PostContextData = {\n    postState,\n    getPosts,\n    showAddPostModal,\n    SetshowAddPostModal,\n    addPost,\n    showToast,\n    SetshowToast,\n    deletePost,\n    updatePost,\n    findPost,\n    SetshowUpdatePostModal,\n    SetshowUpdatePostModal\n  };\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: PostContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostcontextProvider, \"dbRg6jyA/pp30RTJhnOvAsZ+M/c=\");\n\n_c = PostcontextProvider;\nexport default PostcontextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostcontextProvider\");","map":{"version":3,"sources":["/home/thanh/Desktop/Trackerlist/client/src/contexts/Postcontext.js"],"names":["createContext","useReducer","React","axios","apiUrl","POSTS_LOADED_SUCCESS","POSTS_LOADED_FAIL","ADD_POST","DELETE_POST","UPDATE_POST","FIND_POST","PostsReducer","useState","PostContext","PostcontextProvider","children","postState","dispatch","post","posts","postsLoading","showAddPostModal","SetshowAddPostModal","showUpdatePostModal","SetshowUpdatePostModal","showToast","SetshowToast","show","message","type","getPosts","response","get","data","success","payload","error","addPost","newPost","reponse","deletePost","PostID","delete","console","log","findPost","find","x","_id","updatePost","put","PostContextData"],"mappings":"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","sourcesContent":["import { createContext, useReducer } from \"react\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { apiUrl, POSTS_LOADED_SUCCESS, POSTS_LOADED_FAIL,ADD_POST,DELETE_POST,UPDATE_POST,FIND_POST } from \"./constants\";\nimport { PostsReducer } from \"../reducers/PostsReducer\";\nimport { useState } from \"react\";\n\nexport const PostContext = createContext();\n\nconst PostcontextProvider = ({ children }) => {\n  //State\n  const [postState, dispatch] = useReducer(PostsReducer, {\n    post:null,\n    posts: [],\n    postsLoading: true,\n  });\n  const [showAddPostModal, SetshowAddPostModal] = useState(false);\n  const [showUpdatePostModal, SetshowUpdatePostModal] = useState(false);\n  const [showToast, SetshowToast] = useState({\n    show:false,\n    message:'',\n    type:null\n  });\n  \n  //GetAllPost\n  const getPosts = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/posts`);\n      if (response.data.success) {\n        dispatch({ type: POSTS_LOADED_SUCCESS, payload: response.data.posts });\n      }\n    } catch (error) {\n      dispatch({ type: POSTS_LOADED_FAIL });\n    }\n  };\n  //Add Post\n  const addPost = async newPost =>{\n    try {\n      const response = await axios.post(`${apiUrl}/posts`,newPost)\n      if (response.data.success){\n        dispatch({type:ADD_POST,payload :response.data.post})\n        return response.data\n      }\n    } catch (error) {\n      return error.response.data?error.reponse.data : {success:false,message:'Server error'}\n    }\n  }\n  //Delete Post\n  const deletePost = async PostID =>{\n    try {\n      const response = await axios.delete(`${apiUrl}/posts/${PostID}`)\n      if(response.data.success){\n        dispatch({type:DELETE_POST,payload:PostID})\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  //Find post when user is updating\n  const findPost = PostID =>{\n    const post =postState.posts.find(x=>x._id===PostID)\n    dispatch({type:FIND_POST,payload:post})\n  }\n\n  //Update Post\n  const updatePost= async updatePost=>{\n    try {\n      const response = await axios.put(`${apiUrl}/posts/${updatePost._id}`,updatePost)\n      if(response.data.success){\n        dispatch({type: UPDATE_POST, payload:response.data.post})\n        return response.data\n      }\n    } catch (error) {\n      return error.response.data?error.reponse.data : {success:false,message:'Server error'}\n    }\n  }\n  //Take away\n  const PostContextData = {\n    postState,\n    getPosts,\n    showAddPostModal,\n    SetshowAddPostModal,\n    addPost,\n    showToast,\n    SetshowToast,\n    deletePost,\n    updatePost,\n    findPost,\n    SetshowUpdatePostModal,\n    SetshowUpdatePostModal\n  };\n\n  return (\n    <PostContext.Provider value={PostContextData}>\n      {children}\n    </PostContext.Provider>\n  );\n};\n\nexport default PostcontextProvider;\n"]},"metadata":{},"sourceType":"module"}